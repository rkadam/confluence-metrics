#!/usr/bin/env python

"""
analyze.py

Analyze web access logs from generated by Confluence.
Reference: https://confluence.atlassian.com/display/CONFKB/How+to+Enable+User+Access+Logging
Conversion Pattern used in Log4j is explained here: http://www.tutorialspoint.com/log4j/log4j_patternlayout.htm

Here is configuration that we have defined in WEB-INF/classes/log4j.properties
    log4j.appender.accesslog=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.accesslog.Threshold=DEBUG
    log4j.appender.accesslog.File=${catalina.home}/logs/atlassian-confluence-access.log
    log4j.appender.accesslog.DatePattern='.'yyyy-MM-dd
    log4j.appender.accesslog.layout=com.atlassian.confluence.util.PatternLayoutWithStackTrace
    log4j.appender.accesslog.layout.ConversionPattern=%d %p [%t] [%c{4}] %M %m%n
    log4j.category.com.atlassian.confluence.util.AccessLogFilter=INFO, accesslog
    log4j.additivity.com.atlassian.confluence.util.AccessLogFilter=false

Also we will be logging all urls. This is configured in <confluence-4.3.7-dev-std>/confluence/WEB-INF/web.xml
    <!-- Filter for access logging -->
    <filter-mapping>
      <filter-name>AccessLogFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
"""


from logentry import LogEntry
from wikiurl  import WikiUrl

import sys
import psycopg2


if len(sys.argv) < 2:
    print "usage: analyze.py logfile"
    exit()
else:
    filename = sys.argv[1]

lineNmbr  = 0
totalHits = 0
pageViews = 0

spaceHits = {}
pageHits  = {}

urlcount = {}
ipcount  = {}
firstTimestamp = lastTimestamp = None

f = open(filename, "r")
csvfile = open ("log.csv", "w")

ignorelist = []
with open("ignore.list") as ignorelistfile:
    ignorelist = [i.strip() for i in ignorelistfile.readlines()]


for line in f:

    lineNmbr += 1
    print lineNmbr, "\r",

    # Skip lines that may show AccessLogFilter initialized message. We need to get better at doing this.
    # 2013-02-15 17:01:18,140 INFO [main] [atlassian.confluence.util.AccessLogFilter] init AccessLogFilter initialized. Format is: <user> <url> <starting memory free (kb)> +- <difference in free mem (kb)> <query time (ms)> <remote address>
    if "init AccessLogFilter initialized" in line:
        continue

    #print line
    logentry = LogEntry(line)
    #print logentry

    if firstTimestamp == None:
        firstTimestamp = logentry.getTimestamp()
    lastTimestamp = logentry.getTimestamp()

    # Skip empty url because these URLs get redirected to Dashboard URL like homepage.action. In our case it's HOME wiki.
    if (logentry.relativeurl == ''):
        continue

    wikiurl = WikiUrl(logentry.relativeurl, logentry.userid, logentry.datetimestamp, logentry.ipaddress)
    #print wikiurl

    # Here are few entries that we don't want to log into our database as they are duplicate ones.
    # Example: a) http://<wiki base url>/display
    #          b) http://<wiki base url>/display/HOME
    #          c) http://<wiki base url>/homepage.action
    #          d) http://<wiki base url>/pages/editpage.action, createpage.action and so on
    # Because
    # Entries like a) are redirected to dashboard and hence they appear again in access log.
    # Entries like b) /display/HOME, display/HR are redirected to /display/HOME/home and display/HR/home and hence they appear again in access log.
    # Entries like c) homepage.action is re-directed to wiki page as set by Confluence Administrator.
    # Entries like d) editpage.action, createpage.action, createblogpost.action - these all actions happen in two steps.
    #               editpage.action is followed by doeditpage.action, createpage.action is followed by docreatepage.action and so on.
    #               For example: When user wants to edit a page she clicks on edit page link and editpage.action is referenced. Later when user done with edit and click on "Save/submit",
    #                               another action called doeditpage.action gets call. So we would like to track this other action as it confirms user really edited the page.
    #                               Versus the the first action (editpage.action) where user just shows that she has intention to edit the page, but not yet done!
    # By skipping these entries we will avoid counting pages two time for single user action.

    if((wikiurl.actionName in ignorelist) or (wikiurl.actionType == "display" and wikiurl.spacekey != "" and wikiurl.title == "") or (wikiurl.actionType == "display" and wikiurl.spacekey == "") ):
        continue

    # Write data to csv file.
    csvfile.write(wikiurl.userid + '#'+ wikiurl.ipaddress + '#' + wikiurl.actionType + '#' + wikiurl.userAction + '#' + wikiurl.userSubAction + '#' + wikiurl.unknownActionUrl + '#' + wikiurl.spacekey + '#' + wikiurl.title + '#' + wikiurl.pageId + '#' + wikiurl.queryString + '#' + wikiurl.datetimestamp + '#' + wikiurl.actionName + '\n')

    # perform hit accounting

    totalHits += 1

    if wikiurl.actionType == "display" or (wikiurl.actionType == "pages" and wikiurl.userAction == "view" and wikiurl.userSubAction == "page"):
        pageViews += 1

        if(wikiurl.actionType == "display"):
            page = wikiurl.spacekey + "/" + wikiurl.title
        else:
            page = wikiurl.pageId;

        if not page in pageHits:
            pageHits[page] = 1
        else:
            pageHits[page] += 1

    if not wikiurl.spacekey in spaceHits:
        spaceHits[wikiurl.spacekey] = 1
    else:
        spaceHits[wikiurl.spacekey] += 1

f.close()
csvfile.close()

# Time to import this data into database
# First let's export out existing data.
con = None
fout = None
fin = None

try:
    con = psycopg2.connect(database='<dbname>', user='<username>', password='<password>', host='localhost')

    #Export existing data from table into file.
    cur = con.cursor()
    fout = open('logentries-export.sql','w')
    cur.copy_to(fout, 'logentries', sep="#")

    fin = open('log.csv', 'r')
    cur.copy_from(fin, 'logentries', sep="#")

    con.commit();

except psycopg2.DatabaseError, e:
    print 'Error %s' % e
    sys.exit(1)

except IOError, e:
    print 'Error %s' % e
    sys.exit(1)

finally:

    if con:
        con.close()

    if fin:
        fin.close()

    if fout:
        fout.close()

# print report to stdout ____________________________________________________
"""
print
print "For time period", firstTimestamp.strftime("%a, %b %d, %Y %H:%M:%S")
print "             to", lastTimestamp.strftime("%a, %b %d, %Y %H:%M:%S")

print
print "total hits ==>", totalHits

print
print "page views ==>", pageViews

print
print "space hit summary"
spaceHitsKeys = spaceHits.keys()
spaceHitsKeys.sort()
print "-------------------"
print "|  hits  | space   "
print "+--------+---------"
for spaceHitsKey in spaceHitsKeys:
    print '| %6d | %s' % (spaceHits.get(spaceHitsKey), spaceHitsKey)

print
print "page hit summary"
pageHitsKeys = pageHits.keys()
pageHitsKeys.sort()
print "-------------------"
print "|  hits  | page    "
print "+--------+---------"
for pageHitsKey in pageHitsKeys:
    print '| %6d | %s' % (pageHits.get(pageHitsKey), pageHitsKey)
"""
# eof analyze.py ------------------------------------------------------------